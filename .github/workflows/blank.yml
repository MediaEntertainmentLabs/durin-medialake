# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: macos-client-ci-6 
          #macos_client
      - name: Xcodebuild Action
        # You may pin to the exact commit or the version.
        # uses: sersoft-gmbh/xcodebuild-action@1f7c63a65876ab84bc72e3522718361c3f4bc071
        uses: sersoft-gmbh/xcodebuild-action@v1.3
        with:
          # The path to the xcworkspace to build. Mutually exclusive with `project` and `spm-package`. See also `xcodebuild`'s `-workspace`.
          workspace: MediaUploader
          # The path to the xcodeproj to build. Mutually exclusive with `workspace` and `spm-package`. See also `xcodebuild`'s `-project`.
          project: # optional
          # The path to the SPM package (folder containing Package.swift) to build. Mutually exclusive with `workspace` and `project`.
          spm-package: # optional
          # The scheme to build. Required when using a workspace. See also `xcodebuild`'s `-scheme`.
          scheme: MediaUploader
          # The target to build. See also `xcodebuild`'s `-target`.
          target: # optional
          # The destination specifier to build. See also `xcodebuild`'s `-destination`.
          destination: # optional
          # The configuration to build. See also `xcodebuild`'s `-configuration`.
          configuration: # optional
          # The SDK to use for building. See also `xcodebuild`'s `-sdk`.
          sdk: # optional
          # The architecture to use for building. See also `xcodebuild`'s `-arch`.
          arch: # optional
          # The path to an xcconfig file with build settings overrides. See also `xcodebuild`'s `-xcconfig`.
          xcconfig: # optional
          # The number of jobs to use for building. See also `xcodebuild`'s `-jobs`.
          jobs: # optional
          # If `true`, the targets will be built in parallel. See also `xcodebuild`'s `-parallelizeTargets`.
          parallelize-targets: # optional
          # If `true`, code coverage is enabled while testing. See also `xcodebuild`'s `-enableCodeCoverage`.
          enable-code-coverage: # optional
          # If `true`, tests are executed in parallel. See also `xcodebuild`'s `-parallel-testing-enabled`.
          parallel-testing-enabled: # optional
          # Whether the address sanitizer should be enabled. See also `xcodebuild`'s `-enableAddressSanitizer`.
          enable-address-sanitizer: # optional
          # Whether the thread sanitizer should be enabled. See also `xcodebuild`'s `-enableThreadSanitizer`.
          enable-thread-sanitizer: # optional
          # Whether the undefined behavior sanitizer should be enabled. See also `xcodebuild`'s `-enableUndefinedBehaviorSanitizer`.
          enable-undefined-behavior-sanitizer: # optional
          # The path that should be used for the result bundle. See also `xcodebuild`'s `-resultBundlePath`.
          result-bundle-path: # optional
          # The version that should be used for the result bundle. See also `xcodebuild`'s `-resultBundleVersion`.
          result-bundle-version: # optional
          # Tthe path that should be used for derived data. See also `xcodebuild`'s `-derivedDataPath`.
          derived-data-path: # optional
          # A list of tests to skip. See also `xcodebuild`'s `-skip-testing`.
          skip-testing: # optional
          # Whether unavailable actions should be skipped instead of failing the execution. See also `xcodebuild`'s `-skipUnavailableActions`.
          skip-unavailable-actions: # optional
          # Whether provisioning updates are allowed. See also `xcodebuild`'s `-allowProvisioningUpdates`.
          allow-provisioning-updates: -allowProvisioningUpdates
          # Whether provisioning device registrations are allowed. See also `xcodebuild`'s `-allowProvisioningDeviceRegistration`.
          allow-provisioning-device-registration: -allowProvisioningDeviceRegistration
          # Arbitrary, space separated build settings (e.g. PLATFORM_NAME=iphonesimulator).
          build-settings: # optional
          # The action to perform (e.g. build, test, ...). Can also contain multiple actions.
          action: build
          # Whether the output of xcodebuild should be forwarded to xcpretty.
          use-xcpretty: true
          # <TEST ONLY> Whether the commands should only be printed but not actually run. Only used in test.
          dry-run: # optional

    
      # Runs a set of commands using the runners shell
      - name: Start xcodebuild
        shell: bash -l -eo pipefail {0}
        run: |
             echo '-------- pwd --------', $(pwd)
             echo '-------- GITHUB_WORKSPACE --------', $GITHUB_WORKSPACE
             ls -la
             cd MediaUploader
             pod install
             xcodebuild clean build -allowProvisioningDeviceRegistration -allowProvisioningUpdates -workspace 'MediaUploader.xcworkspace' -scheme 'MediaUploader'
      - name: Archiving project
        env:
          PR_NUMBER: $(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
        run: ./.github/scripts/archive_app.sh
